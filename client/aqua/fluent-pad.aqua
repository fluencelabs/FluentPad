service Peer("peer"):
	is_connected: string -> bool

data PeerServicePair:
	peer_id: string
	service_id: string

data EmptyServiceResult:
	ret_code: s32
	err_msg: string

data User:
	peer_id: string
	relay_id: string
	name: string

data GetUsersServiceResult:
	users: []User
	ret_code: s32
	err_msg: string

data AuthResult:
	ret_code: s32
	err_msg: string
	is_authenticated: bool

service UserList:
	is_authenticated: -> AuthResult
	get_users: -> GetUsersServiceResult
	join: User -> EmptyServiceResult
	leave: string -> EmptyServiceResult
	is_exists: string -> ()

data AddServiceResult:
	ret_code: s32
	err_msg: string
	entry_id: u64

data HistoryEntry:
	id: u64
	body: string

data GetEntriesServiceResult:
	ret_code: s32
	err_msg: string
	entries: []HistoryEntry

service History:
	get_all: bool -> GetEntriesServiceResult
	get_last: u64, bool -> GetEntriesServiceResult
	add: string, bool -> AddServiceResult
	set_tetraplet: string, string, string, string -> EmptyServiceResult

func getUserList() -> []User:
	on "userlist_node":
		UserList "userlist_id"
		allUsers <- UserList.get_users()
	<- allUsers.users

-- func updateOnlineStatuses(updateStatus: bool -> ()):
-- 	allUsers <- getUserList()
-- 		for user <- allUsers
-- 			par on user.relay_id
-- 				isOnline <- Peer.is_connected(user.peer_id)

func join(user: User, user_list: PeerServicePair) -> EmptyServiceResult:
	on user_list.peer_id:
		UserList user_list.service_id
		res <- UserList.join(user)
	<- res

func auth(user_list: PeerServicePair) -> AuthResult:
	on user_list.peer_id:
		UserList user_list.service_id
		res <- UserList.is_authenticated()
	<- res

func getHistory(user_list: PeerServicePair, history: PeerServicePair) -> GetEntriesServiceResult:
	authRes <- auth(user_list)
	on history.peer_id:
		History history.service_id
		res <- History.get_all(authRes.is_authenticated)
	<- res
