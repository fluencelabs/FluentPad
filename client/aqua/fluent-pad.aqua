service Peer("peer"):
	is_connected: string -> bool

service Op("op"):
	identity: -> ()

data ServiceInstance:
	peer_id: string
	service_id: string

data App:
	history: ServiceInstance
	user_list: ServiceInstance

data EmptyServiceResult:
	ret_code: s32
	err_msg: string

data User:
	peer_id: string
	relay_id: string
	name: string

data GetUsersServiceResult:
	users: []User
	ret_code: s32
	err_msg: string

data AuthResult:
	ret_code: s32
	err_msg: string
	is_authenticated: bool

service UserList:
	is_authenticated: -> AuthResult
	get_users: -> GetUsersServiceResult
	join: User -> EmptyServiceResult
	leave: string -> EmptyServiceResult
	is_exists: string -> ()

data AddServiceResult:
	ret_code: s32
	err_msg: string
	entry_id: u64

data HistoryEntry:
	id: u64
	body: string

data GetEntriesServiceResult:
	ret_code: s32
	err_msg: string
	entries: []HistoryEntry

service History:
	get_all: bool -> GetEntriesServiceResult
	get_last: u64, bool -> GetEntriesServiceResult
	add: string, bool -> AddServiceResult
	set_tetraplet: string, string, string, string -> EmptyServiceResult

service FluentPad("fluence/fluent-pad"):
	notifyOnline: string, bool -> () -- user peerId, onlineStatus
	notifyUserAdded: User, bool -> () -- user peerId, onlineStatus
	notifyUserRemoved: string -> () -- user peerId,
	notifyTextUpdate: string, string, bool -> () -- authorPeerId, changes, isAuthorized

service AppConfig("fluence/get-config"):
	getApp: -> App
	get_init_peer_id: -> string
	get_init_relay: -> string

func join(user: User) -> EmptyServiceResult:
	app <- AppConfig.getApp()
	relay <- AppConfig.get_init_relay()
	on app.user_list.peer_id via relay:
		UserList app.user_list.service_id
		res <- UserList.join(user)
	<- res

func getUserList() -> []User:
	app <- AppConfig.getApp()
	relay <- AppConfig.get_init_relay()
	on app.user_list.peer_id via relay:
		UserList app.user_list.service_id
		allUsers <- UserList.get_users()
	<- allUsers.users

func initAfterJoin(me: User) -> []User:
	relay <- AppConfig.get_init_relay()
	init_pid <- AppConfig.get_init_peer_id()
	allUsers <- getUserList()
	for user <- allUsers par:
		on user.peer_id via user.relay_id:
			isOnline <- Peer.is_connected(user.peer_id)
			if isOnline:
				FluentPad.notifyUserAdded(me, true)
		par on init_pid via relay:
			FluentPad.notifyUserAdded(user, isOnline)
	<- allUsers

func updateOnlineStatuses() -> bool:
	relay <- AppConfig.get_init_relay()
	init_pid <- AppConfig.get_init_peer_id()
	allUsers <- getUserList()
	for user <- allUsers par:
		on user.peer_id via user.relay_id:
			isOnline <- Peer.is_connected(user.peer_id)
		on init_pid via relay:
			FluentPad.notifyOnline(user.peer_id, isOnline)
	<- true

func leave(currentUserName: string) -> bool:
	app <- AppConfig.getApp()
	relay <- AppConfig.get_init_relay()
	on app.user_list.peer_id via relay:
		UserList app.user_list.service_id
		res <- UserList.leave(currentUserName)
	allUsers <- getUserList()
	for user <- allUsers par:
		on user.peer_id via relay:
			FluentPad.notifyUserRemoved(currentUserName)
	<- true

func auth() -> AuthResult:
	app <- AppConfig.getApp()
	relay <- AppConfig.get_init_relay()
	on app.user_list.peer_id via relay:
		UserList app.user_list.service_id
		res <- UserList.is_authenticated()
	<- res

func getHistory() -> GetEntriesServiceResult:
	app <- AppConfig.getApp()
	authRes <- auth()
	on app.history.peer_id:
		History app.history.service_id
		res <- History.get_all(authRes.is_authenticated)
	<- res

func addEntry(entry: string, selfPeerId: string) -> AddServiceResult:
	app <- AppConfig.getApp()
	authRes <- auth()
	on app.history.peer_id:
		History app.history.service_id
		res <- History.add(entry, authRes.is_authenticated)
	allUsers <- getUserList()
	for user <- allUsers par:
		on user.peer_id via user.relay_id:
			FluentPad.notifyTextUpdate(entry, selfPeerId, authRes.is_authenticated)
	<- res
