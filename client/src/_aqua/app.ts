/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.4.0-235
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    CallParams,
    callFunction,
    registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v2';


// Services

export interface UserStatusDef {
    notifyOnline: (userPeerId: string, isOnline: boolean, callParams: CallParams<'userPeerId' | 'isOnline'>) => void | Promise<void>;
notifyUserAdded: (currentUser: { name: string; peer_id: string; relay_id: string; }, isOnline: boolean, callParams: CallParams<'currentUser' | 'isOnline'>) => void | Promise<void>;
notifyUserRemoved: (userPeerId: string, callParams: CallParams<'userPeerId'>) => void | Promise<void>;
}
export function registerUserStatus(service: UserStatusDef): void;
export function registerUserStatus(serviceId: string, service: UserStatusDef): void;
export function registerUserStatus(peer: FluencePeer, service: UserStatusDef): void;
export function registerUserStatus(peer: FluencePeer, serviceId: string, service: UserStatusDef): void;
       

export function registerUserStatus(...args: any) {
    registerService(
        args,
        {
    "defaultServiceId" : "fluence/fluent-pad/status",
    "functions" : [
        {
            "functionName" : "notifyOnline",
            "argDefs" : [
                {
                    "name" : "userPeerId",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "isOnline",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "void"
            }
        },
        {
            "functionName" : "notifyUserAdded",
            "argDefs" : [
                {
                    "name" : "currentUser",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "isOnline",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "void"
            }
        },
        {
            "functionName" : "notifyUserRemoved",
            "argDefs" : [
                {
                    "name" : "userPeerId",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "void"
            }
        }
    ]
}
    );
}
      


export interface TextStateDef {
    notifyTextUpdate: (changes: string, isAuthorized: boolean, callParams: CallParams<'changes' | 'isAuthorized'>) => void | Promise<void>;
}
export function registerTextState(service: TextStateDef): void;
export function registerTextState(serviceId: string, service: TextStateDef): void;
export function registerTextState(peer: FluencePeer, service: TextStateDef): void;
export function registerTextState(peer: FluencePeer, serviceId: string, service: TextStateDef): void;
       

export function registerTextState(...args: any) {
    registerService(
        args,
        {
    "defaultServiceId" : "fluence/fluent-pad/text-state",
    "functions" : [
        {
            "functionName" : "notifyTextUpdate",
            "argDefs" : [
                {
                    "name" : "changes",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "isAuthorized",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "void"
            }
        }
    ]
}
    );
}
      


export interface AppConfigDef {
    getApp: (callParams: CallParams<null>) => { history: { peer_id: string; service_id: string; }; user_list: { peer_id: string; service_id: string; }; } | Promise<{ history: { peer_id: string; service_id: string; }; user_list: { peer_id: string; service_id: string; }; }>;
}
export function registerAppConfig(service: AppConfigDef): void;
export function registerAppConfig(serviceId: string, service: AppConfigDef): void;
export function registerAppConfig(peer: FluencePeer, service: AppConfigDef): void;
export function registerAppConfig(peer: FluencePeer, serviceId: string, service: AppConfigDef): void;
       

export function registerAppConfig(...args: any) {
    registerService(
        args,
        {
    "defaultServiceId" : "fluence/get-config",
    "functions" : [
        {
            "functionName" : "getApp",
            "argDefs" : [
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        }
    ]
}
    );
}
      
// Functions
 
export type AddEntryResult = { entry_id: number; err_msg: string; ret_code: number; }
export function addEntry(entry: string, config?: {ttl?: number}): Promise<AddEntryResult>;
export function addEntry(peer: FluencePeer, entry: string, config?: {ttl?: number}): Promise<AddEntryResult>;
export function addEntry(...args: any) {

    let script = `
                        (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (seq
                                (seq
                                 (seq
                                  (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                                  (call %init_peer_id% ("getDataSrv" "entry") [] entry)
                                 )
                                 (call %init_peer_id% ("fluence/get-config" "getApp") [] app)
                                )
                                (call %init_peer_id% ("fluence/get-config" "getApp") [] app0)
                               )
                               (call -relay- ("op" "noop") [])
                              )
                              (xor
                               (seq
                                (call -relay- ("op" "noop") [])
                                (call app0.$.user_list.peer_id! (app0.$.user_list.service_id! "is_authenticated") [] res0)
                               )
                               (seq
                                (seq
                                 (call -relay- ("op" "noop") [])
                                 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                )
                                (call -relay- ("op" "noop") [])
                               )
                              )
                             )
                             (xor
                              (call app.$.history.peer_id! (app.$.history.service_id! "add") [entry res0.$.is_authenticated!] res)
                              (seq
                               (call -relay- ("op" "noop") [])
                               (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                              )
                             )
                            )
                            (call -relay- ("op" "noop") [])
                           )
                           (call %init_peer_id% ("fluence/get-config" "getApp") [] app1)
                          )
                          (call -relay- ("op" "noop") [])
                         )
                         (xor
                          (seq
                           (call -relay- ("op" "noop") [])
                           (call app1.$.user_list.peer_id! (app1.$.user_list.service_id! "get_users") [] allUsers)
                          )
                          (seq
                           (call -relay- ("op" "noop") [])
                           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                          )
                         )
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (fold allUsers.$.users! user
                        (par
                         (seq
                          (call -relay- ("op" "noop") [])
                          (xor
                           (mismatch user.$.peer_id! %init_peer_id%
                            (xor
                             (seq
                              (call user.$.relay_id! ("op" "noop") [])
                              (xor
                               (call user.$.peer_id! ("fluence/fluent-pad/text-state" "notifyTextUpdate") [entry res0.$.is_authenticated!])
                               (seq
                                (seq
                                 (seq
                                  (call user.$.relay_id! ("op" "noop") [])
                                  (call -relay- ("op" "noop") [])
                                 )
                                 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                                )
                                (call -relay- ("op" "noop") [])
                               )
                              )
                             )
                             (seq
                              (seq
                               (call user.$.relay_id! ("op" "noop") [])
                               (call -relay- ("op" "noop") [])
                              )
                              (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
                             )
                            )
                           )
                           (null)
                          )
                         )
                         (seq
                          (call -relay- ("op" "noop") [])
                          (next user)
                         )
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 6])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 7])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "addEntry",
    "returnType" : {
        "tag" : "primitive"
    },
    "argDefs" : [
        {
            "name" : "entry",
            "argType" : {
                "tag" : "primitive"
            }
        }
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type GetHistoryResult = { entries: { body: string; id: number; }[]; err_msg: string; ret_code: number; }
export function getHistory(config?: {ttl?: number}): Promise<GetHistoryResult>;
export function getHistory(peer: FluencePeer, config?: {ttl?: number}): Promise<GetHistoryResult>;
export function getHistory(...args: any) {

    let script = `
                        (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("fluence/get-config" "getApp") [] app)
                           )
                           (call %init_peer_id% ("fluence/get-config" "getApp") [] app0)
                          )
                          (call -relay- ("op" "noop") [])
                         )
                         (xor
                          (seq
                           (call -relay- ("op" "noop") [])
                           (call app0.$.user_list.peer_id! (app0.$.user_list.service_id! "is_authenticated") [] res0)
                          )
                          (seq
                           (seq
                            (call -relay- ("op" "noop") [])
                            (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                           )
                           (call -relay- ("op" "noop") [])
                          )
                         )
                        )
                        (xor
                         (call app.$.history.peer_id! (app.$.history.service_id! "get_all") [res0.$.is_authenticated!] res)
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                         )
                        )
                       )
                       (call -relay- ("op" "noop") [])
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "getHistory",
    "returnType" : {
        "tag" : "primitive"
    },
    "argDefs" : [
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

export type InitAfterJoinArgMe = { name: string; peer_id: string; relay_id: string; } 

export function initAfterJoin(me: InitAfterJoinArgMe, config?: {ttl?: number}): Promise<{ name: string; peer_id: string; relay_id: string; }[]>;
export function initAfterJoin(peer: FluencePeer, me: InitAfterJoinArgMe, config?: {ttl?: number}): Promise<{ name: string; peer_id: string; relay_id: string; }[]>;
export function initAfterJoin(...args: any) {

    let script = `
                        (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "me") [] me)
                           )
                           (call %init_peer_id% ("fluence/get-config" "getApp") [] app)
                          )
                          (call -relay- ("op" "noop") [])
                         )
                         (xor
                          (seq
                           (call -relay- ("op" "noop") [])
                           (call app.$.user_list.peer_id! (app.$.user_list.service_id! "get_users") [] allUsers)
                          )
                          (seq
                           (call -relay- ("op" "noop") [])
                           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                          )
                         )
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (fold allUsers.$.users! user
                        (par
                         (seq
                          (seq
                           (seq
                            (call -relay- ("op" "noop") [])
                            (xor
                             (call user.$.relay_id! ("peer" "is_connected") [user.$.peer_id!] isOnline)
                             (seq
                              (call -relay- ("op" "noop") [])
                              (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                             )
                            )
                           )
                           (call -relay- ("op" "noop") [])
                          )
                          (par
                           (seq
                            (call -relay- ("op" "noop") [])
                            (xor
                             (match isOnline true
                              (xor
                               (xor
                                (call user.$.peer_id! ("fluence/fluent-pad/status" "notifyUserAdded") [me true])
                                (seq
                                 (seq
                                  (seq
                                   (call user.$.relay_id! ("op" "noop") [])
                                   (call -relay- ("op" "noop") [])
                                  )
                                  (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                                 )
                                 (call -relay- ("op" "noop") [])
                                )
                               )
                               (seq
                                (seq
                                 (call user.$.relay_id! ("op" "noop") [])
                                 (call -relay- ("op" "noop") [])
                                )
                                (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                               )
                              )
                             )
                             (null)
                            )
                           )
                           (seq
                            (call -relay- ("op" "noop") [])
                            (call %init_peer_id% ("fluence/fluent-pad/status" "notifyUserAdded") [user isOnline])
                           )
                          )
                         )
                         (seq
                          (call -relay- ("op" "noop") [])
                          (next user)
                         )
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [allUsers.$.users!])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 6])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "initAfterJoin",
    "returnType" : {
        "tag" : "primitive"
    },
    "argDefs" : [
        {
            "name" : "me",
            "argType" : {
                "tag" : "primitive"
            }
        }
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function updateOnlineStatuses(config?: {ttl?: number}): Promise<void>;
export function updateOnlineStatuses(peer: FluencePeer, config?: {ttl?: number}): Promise<void>;
export function updateOnlineStatuses(...args: any) {

    let script = `
                        (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("fluence/get-config" "getApp") [] app)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (xor
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call app.$.user_list.peer_id! (app.$.user_list.service_id! "get_users") [] allUsers)
                         )
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                         )
                        )
                       )
                       (call -relay- ("op" "noop") [])
                      )
                      (fold allUsers.$.users! user
                       (par
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (call -relay- ("op" "noop") [])
                             (call user.$.relay_id! ("op" "noop") [])
                            )
                            (xor
                             (call user.$.peer_id! ("peer" "is_connected") [user.$.peer_id!] isOnline)
                             (seq
                              (seq
                               (seq
                                (call user.$.relay_id! ("op" "noop") [])
                                (call -relay- ("op" "noop") [])
                               )
                               (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                              )
                              (call -relay- ("op" "noop") [])
                             )
                            )
                           )
                           (call user.$.relay_id! ("op" "noop") [])
                          )
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("fluence/fluent-pad/status" "notifyOnline") [user.$.peer_id! isOnline])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (next user)
                        )
                       )
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "updateOnlineStatuses",
    "returnType" : {
        "tag" : "void"
    },
    "argDefs" : [
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function getUserList(config?: {ttl?: number}): Promise<{ name: string; peer_id: string; relay_id: string; }[]>;
export function getUserList(peer: FluencePeer, config?: {ttl?: number}): Promise<{ name: string; peer_id: string; relay_id: string; }[]>;
export function getUserList(...args: any) {

    let script = `
                        (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("fluence/get-config" "getApp") [] app)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (xor
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call app.$.user_list.peer_id! (app.$.user_list.service_id! "get_users") [] allUsers)
                         )
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                         )
                        )
                       )
                       (call -relay- ("op" "noop") [])
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [allUsers.$.users!])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "getUserList",
    "returnType" : {
        "tag" : "primitive"
    },
    "argDefs" : [
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function leave(config?: {ttl?: number}): Promise<void>;
export function leave(peer: FluencePeer, config?: {ttl?: number}): Promise<void>;
export function leave(...args: any) {

    let script = `
                        (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                              (call %init_peer_id% ("fluence/get-config" "getApp") [] app)
                             )
                             (call -relay- ("op" "noop") [])
                            )
                            (xor
                             (seq
                              (call -relay- ("op" "noop") [])
                              (call app.$.user_list.peer_id! (app.$.user_list.service_id! "leave") [%init_peer_id%] res)
                             )
                             (seq
                              (call -relay- ("op" "noop") [])
                              (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                             )
                            )
                           )
                           (call -relay- ("op" "noop") [])
                          )
                          (call %init_peer_id% ("fluence/get-config" "getApp") [] app0)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (xor
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call app0.$.user_list.peer_id! (app0.$.user_list.service_id! "get_users") [] allUsers)
                         )
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                         )
                        )
                       )
                       (call -relay- ("op" "noop") [])
                      )
                      (fold allUsers.$.users! user
                       (par
                        (seq
                         (call user.$.relay_id! ("op" "noop") [])
                         (xor
                          (call user.$.peer_id! ("fluence/fluent-pad/status" "notifyUserRemoved") [%init_peer_id%])
                          (seq
                           (seq
                            (call user.$.relay_id! ("op" "noop") [])
                            (call -relay- ("op" "noop") [])
                           )
                           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                          )
                         )
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (next user)
                        )
                       )
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "leave",
    "returnType" : {
        "tag" : "void"
    },
    "argDefs" : [
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

export type JoinArgUser = { name: string; peer_id: string; relay_id: string; } 
export type JoinResult = { err_msg: string; ret_code: number; }
export function join(user: JoinArgUser, config?: {ttl?: number}): Promise<JoinResult>;
export function join(peer: FluencePeer, user: JoinArgUser, config?: {ttl?: number}): Promise<JoinResult>;
export function join(...args: any) {

    let script = `
                        (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "user") [] user)
                          )
                          (call %init_peer_id% ("fluence/get-config" "getApp") [] app)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (xor
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call app.$.user_list.peer_id! (app.$.user_list.service_id! "join") [user] res)
                         )
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                         )
                        )
                       )
                       (call -relay- ("op" "noop") [])
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "join",
    "returnType" : {
        "tag" : "primitive"
    },
    "argDefs" : [
        {
            "name" : "user",
            "argType" : {
                "tag" : "primitive"
            }
        }
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type AuthResult = { err_msg: string; is_authenticated: boolean; ret_code: number; }
export function auth(config?: {ttl?: number}): Promise<AuthResult>;
export function auth(peer: FluencePeer, config?: {ttl?: number}): Promise<AuthResult>;
export function auth(...args: any) {

    let script = `
                        (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("fluence/get-config" "getApp") [] app)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (xor
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call app.$.user_list.peer_id! (app.$.user_list.service_id! "is_authenticated") [] res)
                         )
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                         )
                        )
                       )
                       (call -relay- ("op" "noop") [])
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "auth",
    "returnType" : {
        "tag" : "primitive"
    },
    "argDefs" : [
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
